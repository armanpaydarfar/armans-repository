#!/usr/bin/env python

# Columbia Engineering
# MECS 4602 - Fall 2018

import math
import numpy
import time

import rospy

from state_estimator.msg import RobotPose
from state_estimator.msg import SensorData

class Estimator(object):
    def __init__(self):

        # Publisher to publish state estimate
        self.pub_est = rospy.Publisher("/robot_pose_estimate", RobotPose, queue_size=1)

        # Initial estimates for the state and the covariance matrix
        self.x = numpy.zeros((3,1))
        self.P = numpy.zeros((3,3))

        # Covariance matrix for process (model) noise
        self.V = numpy.zeros((3,3))
        self.V[0,0] = 0.0025
        self.V[1,1] = 0.0025
        self.V[2,2] = 0.005

        self.step_size = 0.01

        # Subscribe to command input and sensory output of robot
        rospy.Subscriber("/sensor_data", SensorData, self.sensor_callback)
        
    # This function gets called every time the robot publishes its control 
    # input and sensory output. You must make use of what you know about 
    # extended Kalman filters to come up with an estimate of the current
    # state of the robot and covariance matrix.
    # The SensorData message contains fields 'vel_trans' and 'vel_ang' for
    # the commanded translational and rotational velocity respectively. 
    # Furthermore, it contains a list 'readings' of the landmarks the
    # robot can currently observe
    def estimate(self, sens):

        #### ----- YOUR CODE GOES HERE ----- ####
        x_hat=self.x[0]+self.step_size*sens.vel_trans*numpy.cos(self.x[2])

        y_hat=self.x[1]+self.step_size*sens.vel_trans*numpy.sin(self.x[2])
        
        theta_hat = self.x[2]+self.step_size*sens.vel_ang
        
        num_landmarks = len(sens.readings)     
        valid_landmarks = []
        H = numpy.zeros((2*num_landmarks,3))  
       
        for i in range(num_landmarks):
            if math.sqrt((x_hat-sens.readings[i].landmark.x)*(x_hat-sens.readings[i].landmark.x)+(y_hat-sens.readings[i].landmark.y)*(y_hat-sens.readings[i].landmark.y)) > 0.1:
                valid_landmarks.append(sens.readings[i])
      
        for i in range(len(valid_landmarks)):
            
                H[2*i,0] = (x_hat-valid_landmarks[i].landmark.x)/numpy.sqrt((x_hat-valid_landmarks[i].landmark.x)*(x_hat-valid_landmarks[i].landmark.x)+(y_hat-valid_landmarks[i].landmark.y)*(y_hat-valid_landmarks[i].landmark.y))
                H[2*i,1] = (y_hat-valid_landmarks[i].landmark.y)/numpy.sqrt((x_hat-valid_landmarks[i].landmark.x)*(x_hat-valid_landmarks[i].landmark.x)+(y_hat-valid_landmarks[i].landmark.y)*(y_hat-valid_landmarks[i].landmark.y))
                H[2*i,2] = 0
                H[2*i+1,0] = (-y_hat+valid_landmarks[i].landmark.y)/((x_hat-valid_landmarks[i].landmark.x)**2+(y_hat-valid_landmarks[i].landmark.y)**2)
                H[2*i+1,1] = (x_hat-valid_landmarks[i].landmark.x)/((x_hat-valid_landmarks[i].landmark.x)**2+(y_hat-valid_landmarks[i].landmark.y)**2)
                H[2*i+1,2] = -1
        
        
        F = numpy.identity(3)
       
        F[0][2] = -self.step_size*sens.vel_trans*numpy.sin(self.x[2])

        F[1][2] = self.step_size*sens.vel_trans*numpy.cos(self.x[2]) 
        
        F_transpose = numpy.transpose(F)
        
        P_hat = numpy.linalg.multi_dot((F,self.P,F_transpose))+self.V     
        
        y = numpy.zeros(H.shape[0])
       
        W = numpy.zeros((H.shape[0],H.shape[0]))
        for i in range(H.shape[0]): 
            if i%2 == 0:            
                W[i][i] = 0.1
                
                
            else:
                W[i][i] = 0.05
               
                
        #math.sqrt((self.x[0]-valid_landmarks[i].landmark.x)*(self.x[0]-valid_landmarks[i].landmark.x)+(self.x[1]-valid_landmarks[i].landmark.y)*(self.x[1]-valid_landmarks[i].landmark.y))
        # math.atan2(valid_landmarks[i].landmark.y-self.x[1],valid_landmarks[i].landmark.x-self.x[0]) - theta_hat
        for i in range(len(valid_landmarks)):
            
                y[2*i] = valid_landmarks[i].range
                y[2*i+1] = valid_landmarks[i].bearing
            
        S = numpy.linalg.multi_dot((H,P_hat,numpy.transpose(H)))+ W
        R = numpy.linalg.multi_dot((P_hat,numpy.transpose(H),numpy.linalg.inv(S)))
       
        h = numpy.zeros(y.shape[0])
        
        for i in range(len(valid_landmarks)):
            h[2*i] = math.sqrt((x_hat-valid_landmarks[i].landmark.x)*(x_hat-valid_landmarks[i].landmark.x)+(y_hat-valid_landmarks[i].landmark.y)*(y_hat-valid_landmarks[i].landmark.y))
            h[2*i+1] = math.atan2(valid_landmarks[i].landmark.y-y_hat,valid_landmarks[i].landmark.x-x_hat) - theta_hat
           
        nu = numpy.subtract(y,h)
       
        for i in range(len(nu)):
           if i%2==0:
               continue
           else:
               while(True):
                  if(nu[i]<-numpy.pi):
                     nu[i]=nu[i]+2*numpy.pi 
                  elif(nu[i]>numpy.pi):
                      nu[i]=nu[i]-2*numpy.pi
                  else:
                      break
                    
        
        P_plus1 = numpy.subtract(P_hat,numpy.linalg.multi_dot((R,H,P_hat)))
        old_vector = numpy.array((x_hat,y_hat,theta_hat))
        
        
        change = numpy.dot(R,numpy.transpose(nu))
        x_plus_1 = numpy.zeros(3,)
        
        x_plus_1[0] = old_vector[0]+change[0]
        x_plus_1[1] = old_vector[1]+change[1]
        x_plus_1[2]=old_vector[2]+change[2]
        self.x[0] = x_plus_1[0]
        self.x[1] = x_plus_1[1]
        self.x[2] = x_plus_1[2]
        self.P = P_plus1

        #### ----- YOUR CODE GOES HERE ----- ####
    
    def sensor_callback(self,sens):

        # Publish state estimate 
        self.estimate(sens)
        est_msg = RobotPose()
        est_msg.header.stamp = sens.header.stamp
        est_msg.pose.x = self.x[0]
        est_msg.pose.y = self.x[1]
        est_msg.pose.theta = self.x[2]
        self.pub_est.publish(est_msg)

if __name__ == '__main__':
    rospy.init_node('state_estimator', anonymous=True)
    est = Estimator()
    rospy.spin()
